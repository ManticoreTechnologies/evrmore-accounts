{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Evrmore Accounts","text":"<p>A secure wallet-based authentication system for Evrmore blockchain applications.</p>"},{"location":"#overview","title":"Overview","text":"<p>Evrmore Accounts is a Python package that provides wallet-based authentication using Evrmore blockchain. It builds on the Evrmore Authentication library to provide a complete account management system for web applications.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udd11 Wallet-based authentication - Users sign challenges with their Evrmore wallet</li> <li>\ud83d\udd12 JWT token management - Secure session handling with JSON Web Tokens</li> <li>\ud83d\udcc1 SQLite backend - Simple, file-based database for session and challenge storage</li> <li>\ud83d\udc64 Automatic user management - Users are created on first authentication</li> <li>\ud83c\udf10 Complete API server - Ready-to-use API server for authentication endpoints</li> <li>\ud83d\udda5\ufe0f Demo web interface - Example application showing the complete authentication flow</li> <li>\ud83d\udcf1 JavaScript client library - Easy integration with web applications</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Installation Guide</li> <li>Quick Start Guide</li> <li>API Reference</li> <li>JavaScript Library</li> <li>Example Integrations</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"#about","title":"About","text":"<p>Developed by Manticore Technologies. </p>"},{"location":"about/changelog/","title":"Changelog","text":"<p>All notable changes to the Evrmore Accounts project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"about/changelog/#100-2025-03-12","title":"[1.0.0] - 2025-03-12","text":""},{"location":"about/changelog/#added","title":"Added","text":"<ul> <li>Initial release of Evrmore Accounts</li> <li>Complete authentication system using Evrmore blockchain</li> <li>RESTful API for authentication endpoints</li> <li>JavaScript client library for web applications</li> <li>Demo web interface</li> <li>Documentation using MkDocs</li> <li>Docker support for easy deployment</li> <li>PyPI package</li> </ul>"},{"location":"about/changelog/#features","title":"Features","text":"<ul> <li>Wallet-based authentication using Evrmore blockchain</li> <li>Challenge-response authentication flow</li> <li>JWT token management</li> <li>User account management</li> <li>Automatic token refresh</li> <li>Customizable UI components</li> <li>Comprehensive documentation</li> </ul>"},{"location":"about/changelog/#030-2025-02-15","title":"[0.3.0] - 2025-02-15","text":""},{"location":"about/changelog/#added_1","title":"Added","text":"<ul> <li>JavaScript client library</li> <li>Demo web interface</li> <li>Token refresh functionality</li> <li>User profile management</li> </ul>"},{"location":"about/changelog/#changed","title":"Changed","text":"<ul> <li>Improved error handling</li> <li>Enhanced security features</li> <li>Updated documentation</li> </ul>"},{"location":"about/changelog/#020-2025-01-20","title":"[0.2.0] - 2025-01-20","text":""},{"location":"about/changelog/#added_2","title":"Added","text":"<ul> <li>RESTful API for authentication</li> <li>JWT token management</li> <li>User account management</li> <li>Basic documentation</li> </ul>"},{"location":"about/changelog/#changed_1","title":"Changed","text":"<ul> <li>Refactored authentication flow</li> <li>Improved challenge generation</li> <li>Enhanced signature verification</li> </ul>"},{"location":"about/changelog/#010-2025-01-05","title":"[0.1.0] - 2025-01-05","text":""},{"location":"about/changelog/#added_3","title":"Added","text":"<ul> <li>Initial development release</li> <li>Basic authentication functionality</li> <li>Challenge generation and verification</li> <li>Integration with Evrmore Authentication library </li> </ul>"},{"location":"about/license/","title":"License","text":"<p>Evrmore Accounts is released under the MIT License.</p> <pre><code>MIT License\n\nCopyright (c) 2023 Manticore Technologies\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"about/license/#third-party-libraries","title":"Third-Party Libraries","text":"<p>Evrmore Accounts uses the following third-party libraries:</p> <ul> <li>Flask: BSD 3-Clause License</li> <li>Flask-CORS: MIT License</li> <li>Evrmore Authentication: MIT License</li> <li>Python-dotenv: BSD 3-Clause License</li> </ul>"},{"location":"about/license/#contact","title":"Contact","text":"<p>If you have any questions about the license or usage of Evrmore Accounts, please contact:</p> <ul> <li>Website: manticore.technology</li> <li>GitHub: github.com/manticoretechnologies</li> <li>Email: dev@manticore.technology </li> </ul>"},{"location":"api/backend/","title":"Backend API Reference","text":"<p>This page documents the RESTful API endpoints provided by Evrmore Accounts.</p>"},{"location":"api/backend/#api-endpoints-overview","title":"API Endpoints Overview","text":"<p>All API endpoints are prefixed with <code>/api</code>.</p> Endpoint Method Description <code>/challenge</code> POST Generate a challenge for a user <code>/authenticate</code> POST Authenticate with a signed challenge <code>/validate</code> GET Validate a JWT token <code>/user</code> GET Get authenticated user information <code>/logout</code> POST Invalidate a JWT token (logout) <code>/health</code> GET Check API health status"},{"location":"api/backend/#challenge-generation","title":"Challenge Generation","text":"<p>Generates a challenge for a user to sign with their Evrmore wallet.</p> <pre><code>POST /api/challenge\n</code></pre>"},{"location":"api/backend/#request-parameters","title":"Request Parameters","text":"Parameter Type Description <code>evrmore_address</code> string The Evrmore address for the user <code>expire_minutes</code> integer (Optional) Minutes until the challenge expires (default: 10)"},{"location":"api/backend/#example-request","title":"Example Request","text":"<pre><code>{\n  \"evrmore_address\": \"EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc\"\n}\n</code></pre>"},{"location":"api/backend/#example-response","title":"Example Response","text":"<pre><code>{\n  \"challenge\": \"Sign this message to authenticate with Evrmore: EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc:1741815113:c4365fe48492d73f\",\n  \"expires_at\": \"2025-03-12T13:41:53.198694\"\n}\n</code></pre>"},{"location":"api/backend/#error-responses","title":"Error Responses","text":"Status Code Description 400 Bad Request - Missing parameters 500 Server Error"},{"location":"api/backend/#authentication","title":"Authentication","text":"<p>Authenticates a user with a signed challenge.</p> <pre><code>POST /api/authenticate\n</code></pre>"},{"location":"api/backend/#request-parameters_1","title":"Request Parameters","text":"Parameter Type Description <code>evrmore_address</code> string The Evrmore address for the user <code>challenge</code> string The challenge text previously generated <code>signature</code> string The signature created by signing the challenge with the user's wallet"},{"location":"api/backend/#example-request_1","title":"Example Request","text":"<pre><code>{\n  \"evrmore_address\": \"EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc\",\n  \"challenge\": \"Sign this message to authenticate with Evrmore: EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc:1741815113:c4365fe48492d73f\",\n  \"signature\": \"H9zHnUbwvQiXpAHnYDxkTRxCHRUKzQXQ3QNAyA+9SJKmEtFfMn7Z5JJXRQs29Jzf6HjA0e2yqC1Xk/9M94Uz6Sc=\"\n}\n</code></pre>"},{"location":"api/backend/#example-response_1","title":"Example Response","text":"<pre><code>{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"expires_at\": \"2025-03-19T13:41:53.198694\",\n  \"user\": {\n    \"id\": \"b95ab2dc-ef0a-4fc4-8404-dc6252c7bb53\",\n    \"evrmore_address\": \"EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc\"\n  }\n}\n</code></pre>"},{"location":"api/backend/#error-responses_1","title":"Error Responses","text":"Status Code Description 400 Bad Request - Missing parameters 401 Unauthorized - Invalid signature 500 Server Error"},{"location":"api/backend/#token-validation","title":"Token Validation","text":"<p>Validates a JWT token.</p> <pre><code>GET /api/validate\n</code></pre>"},{"location":"api/backend/#request-headers","title":"Request Headers","text":"Header Description <code>Authorization</code> Bearer token (format: <code>Bearer &lt;token&gt;</code>)"},{"location":"api/backend/#example-response_2","title":"Example Response","text":"<pre><code>{\n  \"valid\": true,\n  \"expires_at\": \"2025-03-19T13:41:53.198694\",\n  \"evrmore_address\": \"EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc\"\n}\n</code></pre>"},{"location":"api/backend/#error-responses_2","title":"Error Responses","text":"Status Code Description 401 Unauthorized - Invalid or missing token 500 Server Error"},{"location":"api/backend/#user-information","title":"User Information","text":"<p>Gets information about the authenticated user.</p> <pre><code>GET /api/user\n</code></pre>"},{"location":"api/backend/#request-headers_1","title":"Request Headers","text":"Header Description <code>Authorization</code> Bearer token (format: <code>Bearer &lt;token&gt;</code>)"},{"location":"api/backend/#example-response_3","title":"Example Response","text":"<pre><code>{\n  \"id\": \"b95ab2dc-ef0a-4fc4-8404-dc6252c7bb53\",\n  \"evrmore_address\": \"EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc\",\n  \"username\": null,\n  \"email\": null,\n  \"is_active\": true\n}\n</code></pre>"},{"location":"api/backend/#error-responses_3","title":"Error Responses","text":"Status Code Description 401 Unauthorized - Invalid or missing token 500 Server Error"},{"location":"api/backend/#logout","title":"Logout","text":"<p>Invalidates a JWT token (logs out the user).</p> <pre><code>POST /api/logout\n</code></pre>"},{"location":"api/backend/#request-headers_2","title":"Request Headers","text":"Header Description <code>Authorization</code> Bearer token (format: <code>Bearer &lt;token&gt;</code>)"},{"location":"api/backend/#example-response_4","title":"Example Response","text":"<pre><code>{\n  \"success\": true,\n  \"message\": \"Successfully logged out\"\n}\n</code></pre>"},{"location":"api/backend/#error-responses_4","title":"Error Responses","text":"Status Code Description 401 Unauthorized - Invalid or missing token 500 Server Error"},{"location":"api/backend/#health-check","title":"Health Check","text":"<p>Checks the health status of the API.</p> <pre><code>GET /api/health\n</code></pre>"},{"location":"api/backend/#example-response_5","title":"Example Response","text":"<pre><code>{\n  \"status\": \"ok\",\n  \"timestamp\": \"2025-03-12T13:41:53.198694\",\n  \"version\": \"1.0.0\"\n}\n</code></pre>"},{"location":"api/javascript/","title":"JavaScript Client API Reference","text":"<p>The Evrmore Accounts JavaScript client library provides client-side functionality for authentication with the Evrmore Accounts backend.</p>"},{"location":"api/javascript/#installation","title":"Installation","text":""},{"location":"api/javascript/#loading-from-cdn","title":"Loading from CDN","text":"<pre><code>&lt;script src=\"https://cdn.manticore.technology/static/evrmore-accounts.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"api/javascript/#loading-from-your-server","title":"Loading from your server","text":"<pre><code>&lt;script src=\"http://your-server.com/static/evrmore-accounts.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"api/javascript/#initialization","title":"Initialization","text":"<p>Initialize the library with configuration options:</p> <pre><code>EvrmoreAccounts.init({\n  apiUrl: 'https://auth.manticore.technology/api',  // API endpoint URL\n  autoRefresh: true,                               // Auto-refresh authentication (default: true)\n  debug: false                                     // Enable debug logging (default: false)\n});\n</code></pre>"},{"location":"api/javascript/#core-methods","title":"Core Methods","text":""},{"location":"api/javascript/#checking-authentication-status","title":"Checking Authentication Status","text":"<p>Check if the user is authenticated:</p> <pre><code>const isAuthenticated = EvrmoreAccounts.isAuthenticated();\nconsole.log('User is authenticated:', isAuthenticated);\n</code></pre>"},{"location":"api/javascript/#getting-user-information","title":"Getting User Information","text":"<p>Get information about the authenticated user:</p> <pre><code>const user = EvrmoreAccounts.getUser();\nif (user) {\n  console.log('User ID:', user.id);\n  console.log('Evrmore Address:', user.evrmore_address);\n}\n</code></pre>"},{"location":"api/javascript/#getting-authentication-token","title":"Getting Authentication Token","text":"<p>Get the current authentication token:</p> <pre><code>const token = EvrmoreAccounts.getToken();\nconsole.log('Authentication token:', token);\n</code></pre>"},{"location":"api/javascript/#sign-in","title":"Sign In","text":"<p>Start the sign-in flow by generating a challenge for a user:</p> <pre><code>EvrmoreAccounts.signIn('EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc')\n  .then(function(challenge) {\n    console.log('Challenge generated:', challenge.challenge);\n    console.log('Expires at:', challenge.expires_at);\n\n    // The user would sign this challenge with their wallet\n    // and then you would call the authenticate method\n  })\n  .catch(function(error) {\n    console.error('Error generating challenge:', error);\n  });\n</code></pre>"},{"location":"api/javascript/#authenticate","title":"Authenticate","text":"<p>Authenticate with a signed challenge:</p> <pre><code>EvrmoreAccounts.authenticate({\n  evrmoreAddress: 'EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc',\n  challenge: 'Sign this message to authenticate with Evrmore: EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc:1741815113:c4365fe48492d73f',\n  signature: 'H9zHnUbwvQiXpAHnYDxkTRxCHRUKzQXQ3QNAyA+9SJKmEtFfMn7Z5JJXRQs29Jzf6HjA0e2yqC1Xk/9M94Uz6Sc='\n})\n  .then(function(user) {\n    console.log('User authenticated:', user);\n  })\n  .catch(function(error) {\n    console.error('Authentication error:', error);\n  });\n</code></pre>"},{"location":"api/javascript/#sign-out","title":"Sign Out","text":"<p>Sign the user out:</p> <pre><code>EvrmoreAccounts.signOut()\n  .then(function() {\n    console.log('User signed out');\n  })\n  .catch(function(error) {\n    console.error('Sign out error:', error);\n  });\n</code></pre>"},{"location":"api/javascript/#event-listeners","title":"Event Listeners","text":""},{"location":"api/javascript/#authentication-state-changes","title":"Authentication State Changes","text":"<p>Listen for authentication state changes:</p> <pre><code>const unsubscribe = EvrmoreAccounts.onAuthStateChanged(function(user) {\n  if (user) {\n    console.log('User is signed in:', user);\n    // Show authenticated UI\n  } else {\n    console.log('User is signed out');\n    // Show sign-in UI\n  }\n});\n\n// Later, to stop listening\nunsubscribe();\n</code></pre>"},{"location":"api/javascript/#ui-components","title":"UI Components","text":""},{"location":"api/javascript/#sign-in-button","title":"Sign-In Button","text":"<p>Initialize a sign-in button:</p> <pre><code>EvrmoreAccounts.initSignInButton('#sign-in-button');\n</code></pre> <p>With custom options:</p> <pre><code>EvrmoreAccounts.initSignInButton('#sign-in-button', {\n  evrmoreAddress: 'EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc',  // Pre-fill address\n  onChallenge: function(challenge, completeAuth) {\n    // Custom challenge handling logic\n    console.log('Challenge:', challenge.challenge);\n\n    // When the user has signed the challenge\n    const signature = '...'; // Get signature from user\n    completeAuth(signature);\n  }\n});\n</code></pre>"},{"location":"api/javascript/#storage-and-security","title":"Storage and Security","text":"<p>The library automatically:</p> <ol> <li>Stores authentication tokens in localStorage</li> <li>Validates tokens on page load</li> <li>Refreshes tokens automatically if <code>autoRefresh</code> is enabled</li> <li>Clears tokens on sign out or when they become invalid</li> </ol>"},{"location":"api/javascript/#browser-compatibility","title":"Browser Compatibility","text":"<p>The library is compatible with:</p> <ul> <li>Chrome (latest)</li> <li>Firefox (latest)</li> <li>Safari (latest)</li> <li>Edge (latest)</li> <li>IE11 (with polyfills)</li> </ul>"},{"location":"api/javascript/#error-handling","title":"Error Handling","text":"<p>All asynchronous methods return promises that can be caught for error handling:</p> <pre><code>EvrmoreAccounts.signIn('EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc')\n  .then(function(challenge) {\n    // Success\n  })\n  .catch(function(error) {\n    // Handle error\n    console.error('Error:', error.message);\n  });\n</code></pre>"},{"location":"development/contributing/","title":"Contributing to Evrmore Accounts","text":"<p>Thank you for your interest in contributing to Evrmore Accounts! This document provides guidelines and instructions for contributing to the project.</p>"},{"location":"development/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please be respectful and considerate of others when contributing to this project. We aim to foster an inclusive and welcoming community.</p>"},{"location":"development/contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork to your local machine</li> <li>Create a virtual environment and install dependencies:</li> </ol> <pre><code># Create a virtual environment\npython3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install dependencies\npip3 install -e \".[dev]\"\n</code></pre>"},{"location":"development/contributing/#development-workflow","title":"Development Workflow","text":"<ol> <li>Create a branch for your changes:</li> </ol> <pre><code>git checkout -b feature/your-feature-name\n</code></pre> <ol> <li>Make your changes and write tests if applicable</li> <li>Run the tests to ensure everything works:</li> </ol> <pre><code>pytest\n</code></pre> <ol> <li>Format your code using Black and isort:</li> </ol> <pre><code>black evrmore_accounts\nisort evrmore_accounts\n</code></pre> <ol> <li>Commit your changes with a descriptive commit message:</li> </ol> <pre><code>git commit -m \"Add feature: your feature description\"\n</code></pre> <ol> <li>Push your changes to your fork:</li> </ol> <pre><code>git push origin feature/your-feature-name\n</code></pre> <ol> <li>Create a pull request from your fork to the main repository</li> </ol>"},{"location":"development/contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<ul> <li>Keep pull requests focused on a single feature or bug fix</li> <li>Include tests for new features or bug fixes</li> <li>Update documentation as needed</li> <li>Follow the existing code style</li> <li>Make sure all tests pass before submitting</li> </ul>"},{"location":"development/contributing/#code-style","title":"Code Style","text":"<p>We follow the PEP 8 style guide for Python code. We use Black and isort to automatically format code.</p> <pre><code># Format code with Black\nblack evrmore_accounts\n\n# Sort imports with isort\nisort evrmore_accounts\n</code></pre>"},{"location":"development/contributing/#testing","title":"Testing","text":"<p>We use pytest for testing. Please write tests for new features and ensure that all tests pass before submitting a pull request.</p> <pre><code># Run all tests\npytest\n\n# Run tests with coverage\npytest --cov=evrmore_accounts\n</code></pre>"},{"location":"development/contributing/#documentation","title":"Documentation","text":"<p>We use MkDocs for documentation. Please update the documentation as needed when adding or changing features.</p> <pre><code># Install MkDocs and dependencies\npip3 install mkdocs mkdocs-material mkdocstrings\n\n# Run the documentation server locally\nmkdocs serve\n\n# Build the documentation\nmkdocs build\n</code></pre>"},{"location":"development/contributing/#release-process","title":"Release Process","text":"<ol> <li>Update the version number in <code>evrmore_accounts/__init__.py</code></li> <li>Update the changelog in <code>docs/about/changelog.md</code></li> <li>Create a new release on GitHub with release notes</li> <li>Publish to PyPI:</li> </ol> <pre><code># Clean previous builds\nrm -rf build/ dist/ *.egg-info/\n\n# Build the package\npython3 setup.py sdist bdist_wheel\n\n# Upload to PyPI\ntwine upload dist/*\n</code></pre>"},{"location":"development/contributing/#getting-help","title":"Getting Help","text":"<p>If you have questions or need help, please:</p> <ol> <li>Check the documentation</li> <li>Open an issue on GitHub</li> <li>Contact the maintainers at dev@manticore.technology</li> </ol>"},{"location":"development/contributing/#thank-you","title":"Thank You!","text":"<p>Your contributions are greatly appreciated and help make Evrmore Accounts better for everyone! </p>"},{"location":"development/security/","title":"Security","text":"<p>This document outlines security considerations and best practices for deploying and using the Evrmore Accounts package in production environments.</p>"},{"location":"development/security/#security-model","title":"Security Model","text":"<p>Evrmore Accounts uses a blockchain-based authentication system that leverages cryptographic signatures to verify user identity. This approach eliminates the need for password storage and provides several security advantages:</p> <ul> <li>No passwords are stored, eliminating the risk of password database breaches</li> <li>Authentication relies on cryptographic signatures that cannot be forged without access to the private key</li> <li>Each authentication attempt uses a unique challenge, preventing replay attacks</li> <li>JWT tokens are used for session management with configurable expiration</li> </ul>"},{"location":"development/security/#production-deployment-recommendations","title":"Production Deployment Recommendations","text":""},{"location":"development/security/#environment-configuration","title":"Environment Configuration","text":"<ol> <li> <p>Use HTTPS: Always deploy your application behind HTTPS in production. This prevents man-in-the-middle attacks and protects authentication tokens in transit.</p> </li> <li> <p>Secure JWT Secret: Set a strong, unique <code>JWT_SECRET</code> environment variable for production deployments. This secret should be:</p> </li> <li>At least 32 characters long</li> <li>Randomly generated</li> <li> <p>Kept confidential and not committed to source control</p> </li> <li> <p>Configure Token Expiration: Set appropriate values for <code>JWT_EXPIRATION</code> and <code>REFRESH_TOKEN_EXPIRATION</code> based on your security requirements.</p> </li> <li> <p>Limit Access: Use network-level controls to restrict access to your API server from trusted sources only.</p> </li> </ol>"},{"location":"development/security/#docker-security","title":"Docker Security","text":"<p>If using the provided Docker configuration:</p> <ol> <li> <p>Use Non-Root User: Modify the Dockerfile to run the application as a non-root user:    <pre><code># Add after installing dependencies\nRUN adduser --disabled-password --gecos \"\" appuser\nUSER appuser\n</code></pre></p> </li> <li> <p>Pin Dependency Versions: Ensure all dependencies in requirements.txt have pinned versions to prevent unexpected updates.</p> </li> <li> <p>Scan Images: Regularly scan your Docker images for vulnerabilities using tools like Trivy or Docker Scout.</p> </li> </ol>"},{"location":"development/security/#api-security-considerations","title":"API Security Considerations","text":"<ol> <li> <p>Rate Limiting: Implement rate limiting on authentication endpoints to prevent brute force attacks.</p> </li> <li> <p>CORS Configuration: Configure CORS headers to allow only trusted domains to access your API:    <pre><code># In your app configuration\nCORS(app, resources={r\"/api/*\": {\"origins\": \"https://yourtrustedapp.com\"}})\n</code></pre></p> </li> <li> <p>Validate Input: Always validate and sanitize user input to prevent injection attacks.</p> </li> </ol>"},{"location":"development/security/#client-side-security","title":"Client-Side Security","text":"<ol> <li> <p>Token Storage: Store JWT tokens in memory or secure HTTP-only cookies rather than localStorage to mitigate XSS risks.</p> </li> <li> <p>Secure Communication: Always use HTTPS for API calls from your client application.</p> </li> <li> <p>Content Security Policy: Implement a strict Content Security Policy to prevent XSS attacks.</p> </li> </ol>"},{"location":"development/security/#security-monitoring","title":"Security Monitoring","text":"<ol> <li> <p>Logging: Enable comprehensive logging for authentication attempts, including successful and failed attempts.</p> </li> <li> <p>Monitoring: Set up monitoring for unusual authentication patterns that might indicate an attack.</p> </li> <li> <p>Alerts: Configure alerts for multiple failed authentication attempts from the same IP address.</p> </li> </ol>"},{"location":"development/security/#vulnerability-reporting","title":"Vulnerability Reporting","text":"<p>If you discover a security vulnerability in Evrmore Accounts, please report it by sending an email to security@manticore.technology. Please do not disclose security vulnerabilities publicly until they have been addressed by our team.</p>"},{"location":"development/security/#security-updates","title":"Security Updates","text":"<p>Stay informed about security updates by:</p> <ol> <li>Watching the GitHub repository</li> <li>Subscribing to our security mailing list</li> <li>Regularly updating to the latest version of Evrmore Accounts</li> </ol>"},{"location":"development/security/#regular-security-audits","title":"Regular Security Audits","text":"<p>We recommend conducting regular security audits of your implementation, focusing on:</p> <ol> <li>Token handling and storage</li> <li>API endpoint security</li> <li>Input validation</li> <li>Dependency vulnerabilities</li> </ol>"},{"location":"development/security/#additional-resources","title":"Additional Resources","text":"<ul> <li>OWASP API Security Top 10</li> <li>JWT Best Practices</li> <li>Docker Security Best Practices </li> </ul>"},{"location":"development/testing/","title":"Testing Evrmore Accounts","text":"<p>This guide explains how to test the Evrmore Accounts package during development.</p>"},{"location":"development/testing/#setting-up-the-test-environment","title":"Setting Up the Test Environment","text":"<p>Before running tests, you need to set up your development environment:</p> <pre><code># Create a virtual environment\npython3 -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install the package in development mode with test dependencies\npip3 install -e \".[dev]\"\n</code></pre>"},{"location":"development/testing/#running-tests","title":"Running Tests","text":"<p>We use pytest for testing. To run all tests:</p> <pre><code>pytest\n</code></pre> <p>To run tests with coverage information:</p> <pre><code>pytest --cov=evrmore_accounts\n</code></pre> <p>To generate a coverage report:</p> <pre><code>pytest --cov=evrmore_accounts --cov-report=html\n</code></pre> <p>This will generate an HTML coverage report in the <code>htmlcov</code> directory.</p>"},{"location":"development/testing/#test-structure","title":"Test Structure","text":"<p>Tests are organized in the <code>tests</code> directory with the following structure:</p> <pre><code>tests/\n\u251c\u2500\u2500 conftest.py         # Shared fixtures\n\u251c\u2500\u2500 test_api/           # API tests\n\u2502   \u251c\u2500\u2500 test_auth.py    # Authentication tests\n\u2502   \u2514\u2500\u2500 test_server.py  # Server tests\n\u251c\u2500\u2500 test_app.py         # Application tests\n\u2514\u2500\u2500 test_integration.py # Integration tests\n</code></pre>"},{"location":"development/testing/#writing-tests","title":"Writing Tests","text":"<p>When writing tests, follow these guidelines:</p> <ol> <li>Use fixtures: Create reusable fixtures in <code>conftest.py</code></li> <li>Test one thing at a time: Each test should focus on a single functionality</li> <li>Use descriptive names: Test names should describe what they're testing</li> <li>Mock external dependencies: Use pytest's monkeypatch or unittest.mock</li> </ol> <p>Example test:</p> <pre><code>def test_generate_challenge(client):\n    \"\"\"Test challenge generation endpoint.\"\"\"\n    response = client.post(\n        \"/api/challenge\",\n        json={\"evrmore_address\": \"EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc\"}\n    )\n\n    assert response.status_code == 200\n    data = response.json\n    assert \"challenge\" in data\n    assert \"expires_at\" in data\n</code></pre>"},{"location":"development/testing/#test-fixtures","title":"Test Fixtures","text":"<p>We provide several fixtures in <code>conftest.py</code> to help with testing:</p> <ul> <li><code>app</code>: Flask application instance</li> <li><code>client</code>: Flask test client</li> <li><code>auth</code>: AccountsAuth instance</li> <li><code>server</code>: AccountsServer instance</li> <li><code>test_address</code>: Test Evrmore address</li> <li><code>test_challenge</code>: Test challenge</li> <li><code>test_signature</code>: Test signature</li> </ul> <p>Example usage:</p> <pre><code>def test_authenticate(client, test_address, test_challenge, test_signature):\n    \"\"\"Test authentication endpoint.\"\"\"\n    response = client.post(\n        \"/api/authenticate\",\n        json={\n            \"evrmore_address\": test_address,\n            \"challenge\": test_challenge,\n            \"signature\": test_signature\n        }\n    )\n\n    assert response.status_code == 200\n    data = response.json\n    assert \"token\" in data\n    assert \"expires_at\" in data\n    assert \"user\" in data\n</code></pre>"},{"location":"development/testing/#mocking","title":"Mocking","text":"<p>For tests that require mocking external dependencies, use pytest's monkeypatch or unittest.mock:</p> <pre><code>def test_validate_token_with_mock(monkeypatch, auth):\n    \"\"\"Test token validation with mocked EvrmoreAuth.\"\"\"\n\n    # Create a mock object\n    class MockTokenData:\n        expires_at = \"2025-03-19T13:41:53.198694\"\n        evrmore_address = \"EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc\"\n\n    # Mock the validate_token method\n    def mock_validate_token(token):\n        return MockTokenData()\n\n    # Apply the mock\n    monkeypatch.setattr(auth.auth, \"validate_token\", mock_validate_token)\n\n    # Test the method\n    result = auth.validate_token(\"fake_token\")\n\n    assert result[\"valid\"] is True\n    assert result[\"expires_at\"] == MockTokenData.expires_at\n    assert result[\"evrmore_address\"] == MockTokenData.evrmore_address\n</code></pre>"},{"location":"development/testing/#integration-testing","title":"Integration Testing","text":"<p>Integration tests verify that different components work together correctly. These tests typically involve:</p> <ol> <li>Starting the server</li> <li>Making HTTP requests</li> <li>Verifying the responses</li> </ol> <p>Example integration test:</p> <pre><code>def test_full_authentication_flow(client, test_address):\n    \"\"\"Test the full authentication flow.\"\"\"\n    # 1. Generate challenge\n    challenge_response = client.post(\n        \"/api/challenge\",\n        json={\"evrmore_address\": test_address}\n    )\n    assert challenge_response.status_code == 200\n    challenge_data = challenge_response.json\n    challenge = challenge_data[\"challenge\"]\n\n    # 2. Sign challenge (mocked in this example)\n    signature = \"H9zHnUbwvQiXpAHnYDxkTRxCHRUKzQXQ3QNAyA+9SJKmEtFfMn7Z5JJXRQs29Jzf6HjA0e2yqC1Xk/9M94Uz6Sc=\"\n\n    # 3. Authenticate\n    auth_response = client.post(\n        \"/api/authenticate\",\n        json={\n            \"evrmore_address\": test_address,\n            \"challenge\": challenge,\n            \"signature\": signature\n        }\n    )\n    assert auth_response.status_code == 200\n    auth_data = auth_response.json\n    token = auth_data[\"token\"]\n\n    # 4. Validate token\n    validate_response = client.get(\n        \"/api/validate\",\n        headers={\"Authorization\": f\"Bearer {token}\"}\n    )\n    assert validate_response.status_code == 200\n    validate_data = validate_response.json\n    assert validate_data[\"valid\"] is True\n\n    # 5. Get user info\n    user_response = client.get(\n        \"/api/user\",\n        headers={\"Authorization\": f\"Bearer {token}\"}\n    )\n    assert user_response.status_code == 200\n    user_data = user_response.json\n    assert user_data[\"evrmore_address\"] == test_address\n\n    # 6. Logout\n    logout_response = client.post(\n        \"/api/logout\",\n        headers={\"Authorization\": f\"Bearer {token}\"}\n    )\n    assert logout_response.status_code == 200\n    logout_data = logout_response.json\n    assert logout_data[\"success\"] is True\n</code></pre>"},{"location":"development/testing/#javascript-testing","title":"JavaScript Testing","text":"<p>For testing the JavaScript client library, we use Jest. To run JavaScript tests:</p> <pre><code># Install dependencies\nnpm install\n\n# Run tests\nnpm test\n</code></pre>"},{"location":"development/testing/#continuous-integration","title":"Continuous Integration","text":"<p>We use GitHub Actions for continuous integration. The CI pipeline runs tests on multiple Python versions to ensure compatibility.</p> <p>You can see the CI configuration in the <code>.github/workflows/tests.yml</code> file.</p>"},{"location":"development/testing/#test-coverage","title":"Test Coverage","text":"<p>We aim for high test coverage to ensure code quality. You can check the current coverage with:</p> <pre><code>pytest --cov=evrmore_accounts\n</code></pre>"},{"location":"development/testing/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about contributing to the project</li> <li>Explore the API reference </li> </ul>"},{"location":"examples/basic/","title":"Basic Integration Example","text":"<p>This example shows how to integrate Evrmore Accounts into a basic web application.</p>"},{"location":"examples/basic/#html-structure","title":"HTML Structure","text":"<p>Start with a simple HTML structure:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Evrmore Accounts Example&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        .container {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        .card {\n            background-color: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            padding: 30px;\n            width: 100%;\n            max-width: 500px;\n            margin: 20px 0;\n        }\n        .hidden {\n            display: none;\n        }\n        .btn {\n            background-color: #6434eb;\n            color: white;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1&gt;Evrmore Accounts Example&lt;/h1&gt;\n\n        &lt;!-- Authentication Card --&gt;\n        &lt;div class=\"card\"&gt;\n            &lt;!-- Login State --&gt;\n            &lt;div id=\"login-container\"&gt;\n                &lt;h2&gt;Sign in with Evrmore&lt;/h2&gt;\n                &lt;p&gt;Authenticate securely using your Evrmore wallet&lt;/p&gt;\n\n                &lt;button id=\"sign-in-button\" class=\"btn\"&gt;Sign in with Evrmore&lt;/button&gt;\n            &lt;/div&gt;\n\n            &lt;!-- Authenticated State --&gt;\n            &lt;div id=\"user-container\" class=\"hidden\"&gt;\n                &lt;h2&gt;Welcome!&lt;/h2&gt;\n                &lt;p&gt;You are signed in as:&lt;/p&gt;\n                &lt;div id=\"user-info\"&gt;\n                    &lt;p&gt;&lt;strong&gt;Address:&lt;/strong&gt; &lt;span id=\"user-address\"&gt;&lt;/span&gt;&lt;/p&gt;\n                &lt;/div&gt;\n\n                &lt;button id=\"sign-out-button\" class=\"btn\"&gt;Sign Out&lt;/button&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Protected Content --&gt;\n        &lt;div class=\"card hidden\" id=\"protected-content\"&gt;\n            &lt;h2&gt;Protected Content&lt;/h2&gt;\n            &lt;p&gt;This content is only visible to authenticated users.&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Include the Evrmore Accounts JavaScript --&gt;\n    &lt;script src=\"https://cdn.manticore.technology/evrmore-accounts.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        // Your JavaScript will go here\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/basic/#adding-the-javascript","title":"Adding the JavaScript","text":"<p>Now, add the JavaScript code to handle authentication:</p> <pre><code>// Initialize when the page loads\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize Evrmore Accounts\n    EvrmoreAccounts.init({\n        apiUrl: '/api',\n        debug: true\n    });\n\n    // Get UI elements\n    const loginContainer = document.getElementById('login-container');\n    const userContainer = document.getElementById('user-container');\n    const userAddress = document.getElementById('user-address');\n    const protectedContent = document.getElementById('protected-content');\n    const signOutButton = document.getElementById('sign-out-button');\n\n    // Initialize sign-in button\n    EvrmoreAccounts.initSignInButton('#sign-in-button');\n\n    // Listen for authentication state changes\n    EvrmoreAccounts.onAuthStateChanged(function(user) {\n        if (user) {\n            console.log('User is signed in:', user);\n\n            // Update UI for authenticated state\n            loginContainer.classList.add('hidden');\n            userContainer.classList.remove('hidden');\n            protectedContent.classList.remove('hidden');\n\n            // Display user info\n            userAddress.textContent = user.evrmore_address;\n        } else {\n            console.log('User is signed out');\n\n            // Update UI for unauthenticated state\n            loginContainer.classList.remove('hidden');\n            userContainer.classList.add('hidden');\n            protectedContent.classList.add('hidden');\n        }\n    });\n\n    // Sign out button handler\n    signOutButton.addEventListener('click', function() {\n        EvrmoreAccounts.signOut();\n    });\n});\n</code></pre>"},{"location":"examples/basic/#complete-example","title":"Complete Example","text":"<p>Here's the complete example:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Evrmore Accounts Example&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            font-family: Arial, sans-serif;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n        }\n        .container {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n        .card {\n            background-color: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            padding: 30px;\n            width: 100%;\n            max-width: 500px;\n            margin: 20px 0;\n        }\n        .hidden {\n            display: none;\n        }\n        .btn {\n            background-color: #6434eb;\n            color: white;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1&gt;Evrmore Accounts Example&lt;/h1&gt;\n\n        &lt;!-- Authentication Card --&gt;\n        &lt;div class=\"card\"&gt;\n            &lt;!-- Login State --&gt;\n            &lt;div id=\"login-container\"&gt;\n                &lt;h2&gt;Sign in with Evrmore&lt;/h2&gt;\n                &lt;p&gt;Authenticate securely using your Evrmore wallet&lt;/p&gt;\n\n                &lt;button id=\"sign-in-button\" class=\"btn\"&gt;Sign in with Evrmore&lt;/button&gt;\n            &lt;/div&gt;\n\n            &lt;!-- Authenticated State --&gt;\n            &lt;div id=\"user-container\" class=\"hidden\"&gt;\n                &lt;h2&gt;Welcome!&lt;/h2&gt;\n                &lt;p&gt;You are signed in as:&lt;/p&gt;\n                &lt;div id=\"user-info\"&gt;\n                    &lt;p&gt;&lt;strong&gt;Address:&lt;/strong&gt; &lt;span id=\"user-address\"&gt;&lt;/span&gt;&lt;/p&gt;\n                &lt;/div&gt;\n\n                &lt;button id=\"sign-out-button\" class=\"btn\"&gt;Sign Out&lt;/button&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Protected Content --&gt;\n        &lt;div class=\"card hidden\" id=\"protected-content\"&gt;\n            &lt;h2&gt;Protected Content&lt;/h2&gt;\n            &lt;p&gt;This content is only visible to authenticated users.&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Include the Evrmore Accounts JavaScript --&gt;\n    &lt;script src=\"https://cdn.manticore.technology/evrmore-accounts.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        // Initialize when the page loads\n        document.addEventListener('DOMContentLoaded', function() {\n            // Initialize Evrmore Accounts\n            EvrmoreAccounts.init({\n                apiUrl: '/api',\n                debug: true\n            });\n\n            // Get UI elements\n            const loginContainer = document.getElementById('login-container');\n            const userContainer = document.getElementById('user-container');\n            const userAddress = document.getElementById('user-address');\n            const protectedContent = document.getElementById('protected-content');\n            const signOutButton = document.getElementById('sign-out-button');\n\n            // Initialize sign-in button\n            EvrmoreAccounts.initSignInButton('#sign-in-button');\n\n            // Listen for authentication state changes\n            EvrmoreAccounts.onAuthStateChanged(function(user) {\n                if (user) {\n                    console.log('User is signed in:', user);\n\n                    // Update UI for authenticated state\n                    loginContainer.classList.add('hidden');\n                    userContainer.classList.remove('hidden');\n                    protectedContent.classList.remove('hidden');\n\n                    // Display user info\n                    userAddress.textContent = user.evrmore_address;\n                } else {\n                    console.log('User is signed out');\n\n                    // Update UI for unauthenticated state\n                    loginContainer.classList.remove('hidden');\n                    userContainer.classList.add('hidden');\n                    protectedContent.classList.add('hidden');\n                }\n            });\n\n            // Sign out button handler\n            signOutButton.addEventListener('click', function() {\n                EvrmoreAccounts.signOut();\n            });\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/basic/#running-the-example","title":"Running the Example","text":"<ol> <li>Save the above code to a file named <code>index.html</code></li> <li>Make sure the Evrmore Accounts server is running</li> <li>Open the HTML file in a web browser</li> <li>Click the \"Sign in with Evrmore\" button to start the authentication flow</li> </ol>"},{"location":"examples/basic/#next-steps","title":"Next Steps","text":"<ul> <li>Customize the UI to match your application's design</li> <li>Add error handling for authentication failures</li> <li>Implement a custom challenge handler for a better user experience</li> <li>Explore the JavaScript API Reference for more advanced options </li> </ul>"},{"location":"examples/custom-ui/","title":"Custom UI Example","text":"<p>This example shows how to create a custom UI for Evrmore Accounts authentication.</p>"},{"location":"examples/custom-ui/#overview","title":"Overview","text":"<p>While Evrmore Accounts provides a simple sign-in button that handles the authentication flow, you might want to create a custom UI for a more tailored user experience. This example demonstrates how to implement a custom authentication UI using the Evrmore Accounts JavaScript library.</p>"},{"location":"examples/custom-ui/#custom-challenge-handler","title":"Custom Challenge Handler","text":"<p>The key to creating a custom UI is implementing a custom challenge handler. This function is called when a challenge is generated and allows you to control how the challenge is presented to the user and how the signature is collected.</p>"},{"location":"examples/custom-ui/#example-implementation","title":"Example Implementation","text":"<p>Here's a complete example of a custom authentication UI:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Custom Evrmore Authentication UI&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\n            line-height: 1.5;\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            color: #333;\n        }\n\n        .auth-container {\n            background-color: white;\n            border-radius: 8px;\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n            padding: 30px;\n            width: 100%;\n            max-width: 500px;\n            margin: 20px auto;\n        }\n\n        .auth-header {\n            text-align: center;\n            margin-bottom: 20px;\n        }\n\n        .auth-logo {\n            width: 80px;\n            height: 80px;\n            margin-bottom: 15px;\n        }\n\n        .auth-step {\n            margin-bottom: 20px;\n            display: none;\n        }\n\n        .auth-step.active {\n            display: block;\n        }\n\n        .form-group {\n            margin-bottom: 15px;\n        }\n\n        .form-label {\n            display: block;\n            margin-bottom: 5px;\n            font-weight: bold;\n        }\n\n        .form-input {\n            width: 100%;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            font-size: 16px;\n        }\n\n        .form-button {\n            background-color: #6434eb;\n            color: white;\n            border: none;\n            padding: 12px 20px;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 16px;\n            width: 100%;\n        }\n\n        .form-button:hover {\n            background-color: #5729d2;\n        }\n\n        .challenge-box {\n            background-color: #f5f5f5;\n            padding: 15px;\n            border-radius: 4px;\n            font-family: monospace;\n            word-break: break-all;\n            margin-bottom: 15px;\n        }\n\n        .status-message {\n            padding: 10px;\n            border-radius: 4px;\n            margin-bottom: 15px;\n            text-align: center;\n        }\n\n        .status-message.error {\n            background-color: #f8d7da;\n            color: #721c24;\n        }\n\n        .status-message.success {\n            background-color: #d4edda;\n            color: #155724;\n        }\n\n        .status-message.info {\n            background-color: #cce5ff;\n            color: #004085;\n        }\n\n        .user-profile {\n            text-align: center;\n        }\n\n        .user-avatar {\n            width: 80px;\n            height: 80px;\n            background-color: #6434eb;\n            border-radius: 50%;\n            color: white;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 32px;\n            margin: 0 auto 15px;\n        }\n\n        .user-address {\n            font-family: monospace;\n            word-break: break-all;\n            margin-bottom: 20px;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"auth-container\"&gt;\n        &lt;div class=\"auth-header\"&gt;\n            &lt;img src=\"/static/evrmore-logo.svg\" alt=\"Evrmore\" class=\"auth-logo\"&gt;\n            &lt;h1&gt;Evrmore Authentication&lt;/h1&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Step 1: Enter Evrmore Address --&gt;\n        &lt;div id=\"step-address\" class=\"auth-step active\"&gt;\n            &lt;h2&gt;Step 1: Enter Your Evrmore Address&lt;/h2&gt;\n            &lt;div class=\"form-group\"&gt;\n                &lt;label for=\"evrmore-address\" class=\"form-label\"&gt;Evrmore Address&lt;/label&gt;\n                &lt;input type=\"text\" id=\"evrmore-address\" class=\"form-input\" placeholder=\"EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc\"&gt;\n            &lt;/div&gt;\n            &lt;button id=\"generate-challenge-btn\" class=\"form-button\"&gt;Generate Challenge&lt;/button&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Step 2: Sign Challenge --&gt;\n        &lt;div id=\"step-challenge\" class=\"auth-step\"&gt;\n            &lt;h2&gt;Step 2: Sign the Challenge&lt;/h2&gt;\n            &lt;p&gt;Please sign this challenge with your Evrmore wallet:&lt;/p&gt;\n            &lt;div id=\"challenge-text\" class=\"challenge-box\"&gt;&lt;/div&gt;\n\n            &lt;div class=\"form-group\"&gt;\n                &lt;label for=\"signature\" class=\"form-label\"&gt;Signature&lt;/label&gt;\n                &lt;input type=\"text\" id=\"signature\" class=\"form-input\" placeholder=\"Paste your signature here\"&gt;\n            &lt;/div&gt;\n            &lt;button id=\"verify-signature-btn\" class=\"form-button\"&gt;Verify Signature&lt;/button&gt;\n            &lt;button id=\"back-to-address-btn\" class=\"form-button\" style=\"background-color: transparent; color: #6434eb; margin-top: 10px;\"&gt;Back&lt;/button&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Step 3: Authenticated --&gt;\n        &lt;div id=\"step-authenticated\" class=\"auth-step\"&gt;\n            &lt;h2&gt;Authentication Successful&lt;/h2&gt;\n            &lt;div class=\"user-profile\"&gt;\n                &lt;div class=\"user-avatar\"&gt;\ud83d\udc64&lt;/div&gt;\n                &lt;h3 id=\"user-name\"&gt;User&lt;/h3&gt;\n                &lt;div id=\"user-address\" class=\"user-address\"&gt;&lt;/div&gt;\n            &lt;/div&gt;\n            &lt;button id=\"sign-out-btn\" class=\"form-button\"&gt;Sign Out&lt;/button&gt;\n        &lt;/div&gt;\n\n        &lt;!-- Status Messages --&gt;\n        &lt;div id=\"status-message\" class=\"status-message\" style=\"display: none;\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Include the Evrmore Accounts JavaScript --&gt;\n    &lt;script src=\"/static/evrmore-accounts.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n        // Initialize when the page loads\n        document.addEventListener('DOMContentLoaded', function() {\n            // Initialize Evrmore Accounts\n            EvrmoreAccounts.init({\n                apiUrl: '/api',\n                debug: true\n            });\n\n            // Get UI elements\n            const stepAddress = document.getElementById('step-address');\n            const stepChallenge = document.getElementById('step-challenge');\n            const stepAuthenticated = document.getElementById('step-authenticated');\n            const evrmoreAddressInput = document.getElementById('evrmore-address');\n            const challengeText = document.getElementById('challenge-text');\n            const signatureInput = document.getElementById('signature');\n            const generateChallengeBtn = document.getElementById('generate-challenge-btn');\n            const verifySignatureBtn = document.getElementById('verify-signature-btn');\n            const backToAddressBtn = document.getElementById('back-to-address-btn');\n            const signOutBtn = document.getElementById('sign-out-btn');\n            const statusMessage = document.getElementById('status-message');\n            const userName = document.getElementById('user-name');\n            const userAddress = document.getElementById('user-address');\n\n            // Store challenge data\n            let currentChallenge = null;\n\n            // Check if user is already authenticated\n            if (EvrmoreAccounts.isAuthenticated()) {\n                const user = EvrmoreAccounts.getUser();\n                showAuthenticatedStep(user);\n            }\n\n            // Listen for authentication state changes\n            EvrmoreAccounts.onAuthStateChanged(function(user) {\n                if (user) {\n                    showAuthenticatedStep(user);\n                } else {\n                    showAddressStep();\n                }\n            });\n\n            // Generate challenge button handler\n            generateChallengeBtn.addEventListener('click', function() {\n                const evrmoreAddress = evrmoreAddressInput.value.trim();\n\n                if (!evrmoreAddress) {\n                    showStatus('Please enter your Evrmore address', 'error');\n                    return;\n                }\n\n                showStatus('Generating challenge...', 'info');\n\n                EvrmoreAccounts.signIn(evrmoreAddress)\n                    .then(function(challenge) {\n                        currentChallenge = challenge;\n                        challengeText.textContent = challenge.challenge;\n                        showChallengeStep();\n                        hideStatus();\n                    })\n                    .catch(function(error) {\n                        showStatus('Error generating challenge: ' + error.message, 'error');\n                    });\n            });\n\n            // Verify signature button handler\n            verifySignatureBtn.addEventListener('click', function() {\n                const signature = signatureInput.value.trim();\n\n                if (!signature) {\n                    showStatus('Please enter your signature', 'error');\n                    return;\n                }\n\n                if (!currentChallenge) {\n                    showStatus('Challenge not found. Please try again.', 'error');\n                    showAddressStep();\n                    return;\n                }\n\n                showStatus('Verifying signature...', 'info');\n\n                EvrmoreAccounts.authenticate({\n                    evrmoreAddress: currentChallenge.address,\n                    challenge: currentChallenge.challenge,\n                    signature: signature\n                })\n                    .then(function(user) {\n                        showStatus('Authentication successful!', 'success');\n                        setTimeout(function() {\n                            hideStatus();\n                        }, 2000);\n                    })\n                    .catch(function(error) {\n                        showStatus('Authentication failed: ' + error.message, 'error');\n                    });\n            });\n\n            // Back button handler\n            backToAddressBtn.addEventListener('click', function() {\n                showAddressStep();\n                currentChallenge = null;\n            });\n\n            // Sign out button handler\n            signOutBtn.addEventListener('click', function() {\n                EvrmoreAccounts.signOut()\n                    .then(function() {\n                        showStatus('Signed out successfully', 'success');\n                        setTimeout(function() {\n                            hideStatus();\n                        }, 2000);\n                    });\n            });\n\n            // Helper functions\n            function showAddressStep() {\n                stepAddress.classList.add('active');\n                stepChallenge.classList.remove('active');\n                stepAuthenticated.classList.remove('active');\n                evrmoreAddressInput.value = '';\n            }\n\n            function showChallengeStep() {\n                stepAddress.classList.remove('active');\n                stepChallenge.classList.add('active');\n                stepAuthenticated.classList.remove('active');\n                signatureInput.value = '';\n            }\n\n            function showAuthenticatedStep(user) {\n                stepAddress.classList.remove('active');\n                stepChallenge.classList.remove('active');\n                stepAuthenticated.classList.add('active');\n\n                // Update user info\n                userName.textContent = user.username || 'User';\n                userAddress.textContent = user.evrmore_address;\n            }\n\n            function showStatus(message, type) {\n                statusMessage.textContent = message;\n                statusMessage.className = 'status-message ' + type;\n                statusMessage.style.display = 'block';\n            }\n\n            function hideStatus() {\n                statusMessage.style.display = 'none';\n            }\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"examples/custom-ui/#how-it-works","title":"How It Works","text":"<p>This example implements a multi-step authentication flow:</p> <ol> <li>Step 1: Enter Evrmore Address</li> <li>The user enters their Evrmore address</li> <li> <p>The application generates a challenge when the user clicks the button</p> </li> <li> <p>Step 2: Sign Challenge</p> </li> <li>The challenge is displayed to the user</li> <li>The user signs the challenge with their wallet and pastes the signature</li> <li> <p>The application verifies the signature</p> </li> <li> <p>Step 3: Authenticated</p> </li> <li>Upon successful authentication, the user's profile is displayed</li> <li>The user can sign out</li> </ol>"},{"location":"examples/custom-ui/#key-components","title":"Key Components","text":""},{"location":"examples/custom-ui/#challenge-generation","title":"Challenge Generation","text":"<pre><code>EvrmoreAccounts.signIn(evrmoreAddress)\n    .then(function(challenge) {\n        currentChallenge = challenge;\n        challengeText.textContent = challenge.challenge;\n        showChallengeStep();\n    })\n    .catch(function(error) {\n        showStatus('Error generating challenge: ' + error.message, 'error');\n    });\n</code></pre>"},{"location":"examples/custom-ui/#authentication","title":"Authentication","text":"<pre><code>EvrmoreAccounts.authenticate({\n    evrmoreAddress: currentChallenge.address,\n    challenge: currentChallenge.challenge,\n    signature: signature\n})\n    .then(function(user) {\n        showStatus('Authentication successful!', 'success');\n    })\n    .catch(function(error) {\n        showStatus('Authentication failed: ' + error.message, 'error');\n    });\n</code></pre>"},{"location":"examples/custom-ui/#authentication-state-management","title":"Authentication State Management","text":"<pre><code>// Check if user is already authenticated\nif (EvrmoreAccounts.isAuthenticated()) {\n    const user = EvrmoreAccounts.getUser();\n    showAuthenticatedStep(user);\n}\n\n// Listen for authentication state changes\nEvrmoreAccounts.onAuthStateChanged(function(user) {\n    if (user) {\n        showAuthenticatedStep(user);\n    } else {\n        showAddressStep();\n    }\n});\n</code></pre>"},{"location":"examples/custom-ui/#customization-options","title":"Customization Options","text":"<p>You can customize this example in several ways:</p> <ol> <li>UI Design: Modify the CSS to match your application's design</li> <li>Flow Steps: Add or remove steps in the authentication flow</li> <li>Error Handling: Implement more detailed error handling</li> <li>User Profile: Display additional user information</li> <li>Integration: Integrate with your application's navigation and state management</li> </ol>"},{"location":"examples/custom-ui/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the JavaScript API Reference for more advanced options</li> <li>Learn about the authentication flow</li> <li>Check out the backend API for server-side integration </li> </ul>"},{"location":"guide/authentication-flow/","title":"Authentication Flow","text":"<p>This page explains the authentication flow used by Evrmore Accounts.</p>"},{"location":"guide/authentication-flow/#overview","title":"Overview","text":"<p>Evrmore Accounts uses a challenge-response authentication mechanism based on cryptographic signatures. This approach leverages the security of the Evrmore blockchain without requiring users to share their private keys.</p>"},{"location":"guide/authentication-flow/#authentication-steps","title":"Authentication Steps","text":"<p>The authentication process follows these steps:</p> <ol> <li>Challenge Generation: The server generates a unique challenge for the user's Evrmore address</li> <li>Challenge Signing: The user signs the challenge with their private key</li> <li>Signature Verification: The server verifies the signature against the user's public key</li> <li>Token Issuance: Upon successful verification, the server issues a JWT token</li> <li>Session Management: The client stores the token and uses it for subsequent requests</li> </ol>"},{"location":"guide/authentication-flow/#detailed-flow","title":"Detailed Flow","text":""},{"location":"guide/authentication-flow/#1-challenge-generation","title":"1. Challenge Generation","text":"<p>When a user wants to authenticate, the client sends the user's Evrmore address to the server:</p> <pre><code>POST /api/challenge\n{\n  \"evrmore_address\": \"EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc\"\n}\n</code></pre> <p>The server generates a unique challenge string that includes: - A fixed prefix - The user's Evrmore address - A timestamp - A random nonce</p> <p>Example challenge: <pre><code>Sign this message to authenticate with Evrmore: EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc:1741815113:c4365fe48492d73f\n</code></pre></p>"},{"location":"guide/authentication-flow/#2-challenge-signing","title":"2. Challenge Signing","text":"<p>The user signs this challenge with their private key. This can be done using: - The Evrmore Core wallet - A compatible wallet application - The <code>evrmore-cli</code> command-line tool</p> <p>Example using <code>evrmore-cli</code>: <pre><code>evrmore-cli signmessage \"EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc\" \"Sign this message to authenticate with Evrmore: EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc:1741815113:c4365fe48492d73f\"\n</code></pre></p> <p>This produces a base64-encoded signature.</p>"},{"location":"guide/authentication-flow/#3-signature-verification","title":"3. Signature Verification","text":"<p>The client sends the signature back to the server along with the original challenge and Evrmore address:</p> <pre><code>POST /api/authenticate\n{\n  \"evrmore_address\": \"EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc\",\n  \"challenge\": \"Sign this message to authenticate with Evrmore: EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc:1741815113:c4365fe48492d73f\",\n  \"signature\": \"H9zHnUbwvQiXpAHnYDxkTRxCHRUKzQXQ3QNAyA+9SJKmEtFfMn7Z5JJXRQs29Jzf6HjA0e2yqC1Xk/9M94Uz6Sc=\"\n}\n</code></pre> <p>The server verifies the signature using the Evrmore blockchain's signature verification algorithm. This confirms that the signature was created by the private key corresponding to the provided Evrmore address.</p>"},{"location":"guide/authentication-flow/#4-token-issuance","title":"4. Token Issuance","text":"<p>If the signature is valid, the server: 1. Creates or retrieves the user account associated with the Evrmore address 2. Generates a JWT token containing the user's information and an expiration time 3. Returns the token to the client</p> <pre><code>{\n  \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"expires_at\": \"2025-03-19T13:41:53.198694\",\n  \"user\": {\n    \"id\": \"b95ab2dc-ef0a-4fc4-8404-dc6252c7bb53\",\n    \"evrmore_address\": \"EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc\"\n  }\n}\n</code></pre>"},{"location":"guide/authentication-flow/#5-session-management","title":"5. Session Management","text":"<p>The client stores the token (typically in localStorage) and includes it in the Authorization header for subsequent API requests:</p> <pre><code>GET /api/user\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre> <p>The server validates the token on each request and grants access to protected resources if the token is valid.</p>"},{"location":"guide/authentication-flow/#token-refresh","title":"Token Refresh","text":"<p>Tokens have an expiration time to enhance security. The client can:</p> <ol> <li>Automatically refresh the token before it expires</li> <li>Request a new token when the current one expires</li> <li>Sign out the user when the token expires</li> </ol>"},{"location":"guide/authentication-flow/#security-considerations","title":"Security Considerations","text":"<p>This authentication flow provides several security benefits:</p> <ol> <li>Private Key Protection: The user's private key never leaves their wallet</li> <li>Challenge Uniqueness: Each challenge includes a timestamp and random nonce to prevent replay attacks</li> <li>Limited Challenge Lifetime: Challenges expire after a short period (default: 10 minutes)</li> <li>Token Expiration: JWT tokens have a limited lifetime</li> <li>Signature Verification: The signature verification uses the same cryptographic algorithms as the Evrmore blockchain</li> </ol>"},{"location":"guide/authentication-flow/#next-steps","title":"Next Steps","text":"<ul> <li>Learn how to configure the authentication settings</li> <li>See example integrations for implementation details</li> <li>Explore the JavaScript library for client-side authentication </li> </ul>"},{"location":"guide/configuration/","title":"Configuration","text":"<p>This page explains how to configure Evrmore Accounts for your specific needs.</p>"},{"location":"guide/configuration/#environment-variables","title":"Environment Variables","text":"<p>Evrmore Accounts can be configured using environment variables. You can set these in your environment or use a <code>.env</code> file in your project directory.</p>"},{"location":"guide/configuration/#server-configuration","title":"Server Configuration","text":"Variable Description Default <code>PORT</code> Port to run the server on <code>5000</code> <code>HOST</code> Host to bind to <code>0.0.0.0</code> <code>DEBUG</code> Enable debug mode <code>false</code> <code>SECRET_KEY</code> Secret key for JWT token signing <code>dev-key</code> (change in production!)"},{"location":"guide/configuration/#database-configuration","title":"Database Configuration","text":"Variable Description Default <code>DATABASE_URL</code> Database connection URL <code>sqlite:///evrmore_accounts.db</code>"},{"location":"guide/configuration/#authentication-configuration","title":"Authentication Configuration","text":"Variable Description Default <code>CHALLENGE_EXPIRE_MINUTES</code> Minutes until a challenge expires <code>10</code> <code>TOKEN_EXPIRE_DAYS</code> Days until a JWT token expires <code>7</code> <code>EVRMORE_AUTH_DEBUG</code> Enable debug mode for Evrmore Authentication <code>false</code>"},{"location":"guide/configuration/#example-env-file","title":"Example .env File","text":"<pre><code># Server configuration\nPORT=5000\nHOST=0.0.0.0\nDEBUG=false\nSECRET_KEY=your-secret-key-here\n\n# Database configuration\nDATABASE_URL=sqlite:///evrmore_accounts.db\n\n# Authentication configuration\nCHALLENGE_EXPIRE_MINUTES=10\nTOKEN_EXPIRE_DAYS=7\nEVRMORE_AUTH_DEBUG=false\n</code></pre>"},{"location":"guide/configuration/#configuration-in-code","title":"Configuration in Code","text":"<p>You can also configure Evrmore Accounts programmatically when creating the application:</p> <pre><code>from evrmore_accounts.app import EvrmoreAccountsApp\n\n# Create app with custom configuration\napp = EvrmoreAccountsApp(debug=True)\n\n# Run the app on a custom port\napp.run(host=\"127.0.0.1\", port=8000)\n</code></pre>"},{"location":"guide/configuration/#api-server-configuration","title":"API Server Configuration","text":"<p>When using the API server directly, you can configure it during initialization:</p> <pre><code>from evrmore_accounts.api import AccountsServer\n\n# Create server with custom configuration\nserver = AccountsServer(debug=True)\n\n# Run the server on a custom port\nserver.run(host=\"127.0.0.1\", port=8000)\n</code></pre>"},{"location":"guide/configuration/#javascript-client-configuration","title":"JavaScript Client Configuration","text":"<p>The JavaScript client can be configured during initialization:</p> <pre><code>// Initialize with custom configuration\nEvrmoreAccounts.init({\n  apiUrl: 'https://your-api-server.com/api',\n  autoRefresh: true,\n  debug: true\n});\n</code></pre>"},{"location":"guide/configuration/#javascript-configuration-options","title":"JavaScript Configuration Options","text":"Option Description Default <code>apiUrl</code> URL of the API server <code>/api</code> <code>autoRefresh</code> Automatically refresh tokens before expiration <code>true</code> <code>debug</code> Enable debug logging <code>false</code>"},{"location":"guide/configuration/#cors-configuration","title":"CORS Configuration","text":"<p>By default, Evrmore Accounts allows cross-origin requests from any origin. You can configure CORS settings by modifying the <code>evrmore_accounts/api/server.py</code> file:</p> <pre><code># Initialize Flask app\nself.app = Flask(__name__)\nCORS(self.app, resources={r\"/api/*\": {\"origins\": \"https://yourdomain.com\"}})\n</code></pre>"},{"location":"guide/configuration/#customizing-templates","title":"Customizing Templates","text":"<p>You can customize the HTML templates by copying the files from <code>evrmore_accounts/templates</code> to your project and modifying them. Then, configure Flask to use your custom templates:</p> <pre><code>from flask import Flask\n\napp = Flask(__name__, template_folder=\"your_custom_templates\")\n</code></pre>"},{"location":"guide/configuration/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about the authentication flow</li> <li>Explore example integrations</li> <li>Check out the API reference </li> </ul>"},{"location":"guide/deployment/","title":"Deployment Guide","text":"<p>This guide explains how to deploy Evrmore Accounts in a production environment.</p>"},{"location":"guide/deployment/#deploying-with-gunicorn","title":"Deploying with Gunicorn","text":"<p>For production deployments, we recommend using Gunicorn (Green Unicorn), a Python WSGI HTTP Server.</p>"},{"location":"guide/deployment/#installation","title":"Installation","text":"<p>First, ensure you have Gunicorn installed:</p> <pre><code>pip3 install gunicorn\n</code></pre> <p>Gunicorn is already included in the project's <code>requirements.txt</code>, so if you've installed the package dependencies, you should already have it.</p>"},{"location":"guide/deployment/#basic-usage","title":"Basic Usage","text":"<p>The project includes a <code>wsgi.py</code> file that serves as the entry point for Gunicorn and a <code>run_gunicorn.sh</code> script that provides a convenient way to start the server with common configuration options.</p> <p>To run the application using the provided script:</p> <pre><code>./run_gunicorn.sh\n</code></pre> <p>This script sets up Gunicorn with reasonable defaults: - 4 worker processes - 120 second timeout - Binding to 0.0.0.0:5000 - Info-level logging</p>"},{"location":"guide/deployment/#custom-configuration","title":"Custom Configuration","text":"<p>You can customize the Gunicorn configuration by setting environment variables before running the script:</p> <pre><code># Set custom values\nexport PORT=8000\nexport HOST=127.0.0.1\nexport WORKERS=2\nexport TIMEOUT=60\nexport LOG_LEVEL=debug\n\n# Run with custom configuration\n./run_gunicorn.sh\n</code></pre>"},{"location":"guide/deployment/#running-gunicorn-directly","title":"Running Gunicorn Directly","text":"<p>If you prefer to run Gunicorn directly without the script:</p> <pre><code>gunicorn --bind 0.0.0.0:5000 --workers 4 wsgi:app\n</code></pre>"},{"location":"guide/deployment/#gunicorn-configuration-options","title":"Gunicorn Configuration Options","text":"<p>Here are some common Gunicorn options you might want to adjust:</p> Option Description Default <code>--workers</code> Number of worker processes 4 <code>--timeout</code> Worker timeout in seconds 120 <code>--bind</code> Address to bind to 0.0.0.0:5000 <code>--log-level</code> Log level (debug, info, warning, error, critical) info <code>--access-logfile</code> Access log file - (stdout) <code>--error-logfile</code> Error log file - (stderr) <code>--max-requests</code> Maximum number of requests a worker will process before restarting None <code>--worker-class</code> Worker class type (sync, eventlet, gevent, etc.) sync <p>For a complete list of options, refer to the Gunicorn documentation.</p>"},{"location":"guide/deployment/#deployment-with-docker","title":"Deployment with Docker","text":"<p>The project includes a Dockerfile that already uses Gunicorn for production deployments.</p> <p>To build and run the Docker container:</p> <pre><code># Build the Docker image\ndocker build -t evrmore-accounts .\n\n# Run the container\ndocker run -p 5000:5000 evrmore-accounts\n</code></pre> <p>You can override the default settings by passing environment variables:</p> <pre><code>docker run -p 8000:8000 \\\n  -e PORT=8000 \\\n  -e WORKERS=2 \\\n  -e TIMEOUT=60 \\\n  -e JWT_SECRET=your_secure_secret \\\n  evrmore-accounts\n</code></pre>"},{"location":"guide/deployment/#deployment-with-systemd","title":"Deployment with Systemd","text":"<p>For deploying on Linux servers with systemd, you can create a service file:</p> <pre><code>[Unit]\nDescription=Evrmore Accounts Gunicorn Service\nAfter=network.target\n\n[Service]\nUser=evrmore\nGroup=evrmore\nWorkingDirectory=/path/to/evrmore-accounts\nEnvironment=\"PATH=/path/to/venv/bin\"\nEnvironment=\"JWT_SECRET=your_secure_secret\"\nExecStart=/path/to/venv/bin/gunicorn --workers 4 --bind 0.0.0.0:5000 wsgi:app\nRestart=on-failure\nRestartSec=5s\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Save this to <code>/etc/systemd/system/evrmore-accounts.service</code>, then:</p> <pre><code># Reload systemd\nsudo systemctl daemon-reload\n\n# Start the service\nsudo systemctl start evrmore-accounts\n\n# Enable the service to start at boot\nsudo systemctl enable evrmore-accounts\n</code></pre>"},{"location":"guide/deployment/#deployment-with-nginx-reverse-proxy","title":"Deployment with Nginx Reverse Proxy","text":"<p>In production, it's recommended to use Nginx as a reverse proxy in front of Gunicorn:</p> <pre><code>server {\n    listen 80;\n    server_name your-domain.com;\n\n    location / {\n        proxy_pass http://127.0.0.1:5000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre> <p>For HTTPS support, we recommend using Certbot to obtain SSL certificates:</p> <pre><code># Install Certbot\nsudo apt install certbot python3-certbot-nginx\n\n# Obtain and configure SSL certificate\nsudo certbot --nginx -d your-domain.com\n</code></pre>"},{"location":"guide/deployment/#performance-tuning","title":"Performance Tuning","text":"<p>For high-traffic deployments, consider these optimizations:</p> <ol> <li>Adjust worker count: A common formula is <code>2 * CPU cores + 1</code></li> <li>Use worker classes: For I/O bound applications, consider using gevent or eventlet</li> <li>Implement caching: Add Redis or Memcached for caching</li> <li>Database connection pooling: Optimize database connections</li> <li>Content Delivery Network (CDN): Use a CDN for static assets</li> </ol>"},{"location":"guide/deployment/#health-checks","title":"Health Checks","text":"<p>The application provides a health check endpoint at <code>/api/health</code> that returns the current status and version.</p> <p>Use this for monitoring and load balancer health checks:</p> <pre><code>curl http://your-server.com/api/health\n</code></pre>"},{"location":"guide/deployment/#monitoring","title":"Monitoring","text":"<p>For production deployments, consider setting up monitoring:</p> <ol> <li>Prometheus: For metrics collection</li> <li>Grafana: For dashboards and visualization</li> <li>ELK Stack: For log aggregation and analysis</li> <li>Uptime monitoring: Services like Uptime Robot or Pingdom</li> </ol>"},{"location":"guide/deployment/#next-steps","title":"Next Steps","text":"<ul> <li>Review security guidelines for production deployments</li> <li>Check troubleshooting for common issues</li> <li>Explore customization options for your deployment </li> </ul>"},{"location":"guide/installation/","title":"Installation","text":"<p>This guide explains how to install the Evrmore Accounts package and its dependencies.</p>"},{"location":"guide/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing Evrmore Accounts, ensure you have the following:</p> <ul> <li>Python 3.7 or later</li> <li>pip package manager</li> <li>(Optional) A virtual environment tool like venv or conda</li> </ul>"},{"location":"guide/installation/#installing-from-pypi","title":"Installing from PyPI","text":"<p>The recommended way to install Evrmore Accounts is via pip:</p> <pre><code>pip3 install evrmore-accounts\n</code></pre> <p>This will install Evrmore Accounts and all its dependencies.</p>"},{"location":"guide/installation/#installing-from-source","title":"Installing from Source","text":"<p>Alternatively, you can install from source:</p> <pre><code># Clone the repository\ngit clone https://github.com/manticoretechnologies/evrmore-accounts.git\ncd evrmore-accounts\n\n# Install in development mode\npip3 install -e .\n</code></pre>"},{"location":"guide/installation/#docker-installation","title":"Docker Installation","text":"<p>Evrmore Accounts is also available as a Docker image:</p> <pre><code># Pull the image\ndocker pull manticoretechnologies/evrmore-accounts\n\n# Run the container\ndocker run -p 5000:5000 manticoretechnologies/evrmore-accounts\n</code></pre>"},{"location":"guide/installation/#dependencies","title":"Dependencies","text":"<p>Evrmore Accounts relies on the following packages:</p> <ul> <li>Flask (&gt;=2.0.0)</li> <li>Flask-CORS (&gt;=3.0.0)</li> <li>Evrmore Authentication (&gt;=0.3.0)</li> <li>Python-dotenv (&gt;=0.19.0)</li> </ul>"},{"location":"guide/installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify the installation, run:</p> <pre><code>python3 -c \"import evrmore_accounts; print(evrmore_accounts.__version__)\"\n</code></pre> <p>This should display the installed version of Evrmore Accounts.</p>"},{"location":"guide/installation/#next-steps","title":"Next Steps","text":"<p>Once installed, check out the Quick Start Guide to begin using Evrmore Accounts. </p>"},{"location":"guide/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get up and running with Evrmore Accounts quickly.</p>"},{"location":"guide/quickstart/#running-the-server","title":"Running the Server","text":"<p>After installing Evrmore Accounts, you can start the server with:</p> <pre><code>python3 -m evrmore_accounts.app\n</code></pre> <p>This will start a Flask server on <code>http://localhost:5000</code> with both the API endpoints and a web interface.</p>"},{"location":"guide/quickstart/#exploring-the-demo","title":"Exploring the Demo","text":"<p>Open <code>http://localhost:5000/demo</code> in your web browser to see the authentication flow in action. The demo provides a complete example of:</p> <ol> <li>Generating a challenge for a user's Evrmore address</li> <li>Signing the challenge with an Evrmore wallet</li> <li>Authenticating with the signed challenge</li> <li>Accessing authenticated resources</li> </ol>"},{"location":"guide/quickstart/#integration-example","title":"Integration Example","text":"<p>Check out the simple integration example at <code>http://localhost:5000/example</code>. This shows how to integrate Evrmore Accounts with your web application using the JavaScript client library.</p>"},{"location":"guide/quickstart/#api-endpoints","title":"API Endpoints","text":"<p>The following API endpoints are available:</p> Endpoint Method Description <code>/api/challenge</code> POST Generate a challenge for a user <code>/api/authenticate</code> POST Authenticate with a signed challenge <code>/api/validate</code> GET Validate a JWT token <code>/api/user</code> GET Get authenticated user information <code>/api/logout</code> POST Invalidate a JWT token (logout)"},{"location":"guide/quickstart/#javascript-client-library","title":"JavaScript Client Library","text":"<p>To use Evrmore Accounts in your web application, add the JavaScript client library:</p> <pre><code>&lt;script src=\"https://cdn.manticore.technology/static/evrmore-accounts.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Initialize the library and create a sign-in button:</p> <pre><code>// Initialize Evrmore Accounts\nEvrmoreAccounts.init({\n  apiUrl: 'https://auth.manticore.technology/api',\n  autoRefresh: true,\n  debug: false\n});\n\n// Create a sign-in button\nEvrmoreAccounts.initSignInButton('#sign-in-button');\n\n// Listen for authentication state changes\nEvrmoreAccounts.onAuthStateChanged(function(user) {\n  if (user) {\n    console.log('User is signed in:', user);\n    // Show authenticated UI\n  } else {\n    console.log('User is signed out');\n    // Show sign-in UI\n  }\n});\n</code></pre>"},{"location":"guide/quickstart/#whats-next","title":"What's Next?","text":"<ul> <li>Learn more about the authentication flow</li> <li>Explore the API reference</li> <li>Check out the JavaScript library documentation</li> <li>See example integrations </li> </ul>"},{"location":"guides/customization/","title":"Customization Guide","text":"<p>This guide explains how to customize the Evrmore Accounts package to match your application's requirements and branding.</p>"},{"location":"guides/customization/#customizing-the-ui","title":"Customizing the UI","text":""},{"location":"guides/customization/#styling","title":"Styling","text":"<p>The Evrmore Accounts package comes with default styling that you can customize to match your application's design.</p>"},{"location":"guides/customization/#css-customization","title":"CSS Customization","text":"<ol> <li>Create a custom CSS file in your application:</li> </ol> <pre><code>/* custom-evrmore-accounts.css */\n.evrmore-accounts-container {\n  background-color: #f5f5f5;\n  border-radius: 8px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  padding: 20px;\n  max-width: 400px;\n  margin: 0 auto;\n}\n\n.evrmore-accounts-button {\n  background-color: #4a90e2;\n  color: white;\n  border: none;\n  padding: 10px 15px;\n  border-radius: 4px;\n  cursor: pointer;\n  font-weight: bold;\n}\n\n.evrmore-accounts-button:hover {\n  background-color: #357ab8;\n}\n\n/* Add more custom styles as needed */\n</code></pre> <ol> <li>Include your custom CSS after the Evrmore Accounts JavaScript:</li> </ol> <pre><code>&lt;script src=\"/evrmore_accounts/static/evrmore-accounts.js\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" href=\"/path/to/custom-evrmore-accounts.css\"&gt;\n</code></pre>"},{"location":"guides/customization/#customizing-the-logo","title":"Customizing the Logo","text":"<p>You can replace the default Evrmore logo with your own:</p> <pre><code>const evrmoreAccounts = new EvrmoreAccounts({\n  apiUrl: 'http://localhost:5000/api',\n  logo: '/path/to/your-logo.svg',\n  logoAlt: 'Your Company Name'\n});\n</code></pre>"},{"location":"guides/customization/#html-templates","title":"HTML Templates","text":"<p>For more extensive customization, you can override the default HTML templates:</p> <ol> <li>Create custom templates in your application:</li> </ol> <pre><code>const customTemplates = {\n  loginButton: `\n    &lt;button class=\"custom-login-button\" id=\"evrmore-login-button\"&gt;\n      &lt;img src=\"/path/to/wallet-icon.svg\" alt=\"Wallet\"&gt;\n      Sign in with Blockchain\n    &lt;/button&gt;\n  `,\n  challengePrompt: `\n    &lt;div class=\"custom-challenge-container\"&gt;\n      &lt;h3&gt;Verify Your Identity&lt;/h3&gt;\n      &lt;p&gt;Please sign this message with your Evrmore wallet:&lt;/p&gt;\n      &lt;div class=\"challenge-text\"&gt;{{challenge}}&lt;/div&gt;\n      &lt;div class=\"instructions\"&gt;\n        &lt;p&gt;1. Copy the text above&lt;/p&gt;\n        &lt;p&gt;2. Sign it with your wallet&lt;/p&gt;\n        &lt;p&gt;3. Paste the signature below&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;textarea id=\"evrmore-signature-input\" placeholder=\"Paste your signature here\"&gt;&lt;/textarea&gt;\n      &lt;button id=\"evrmore-submit-signature\"&gt;Verify Signature&lt;/button&gt;\n      &lt;button id=\"evrmore-cancel-auth\"&gt;Cancel&lt;/button&gt;\n    &lt;/div&gt;\n  `,\n  userProfile: `\n    &lt;div class=\"custom-profile-container\"&gt;\n      &lt;h3&gt;Welcome, Blockchain User!&lt;/h3&gt;\n      &lt;p&gt;Address: {{address}}&lt;/p&gt;\n      &lt;p&gt;User since: {{created_at}}&lt;/p&gt;\n      &lt;button id=\"evrmore-logout-button\"&gt;Sign Out&lt;/button&gt;\n    &lt;/div&gt;\n  `\n};\n\nconst evrmoreAccounts = new EvrmoreAccounts({\n  apiUrl: 'http://localhost:5000/api',\n  templates: customTemplates\n});\n</code></pre> <ol> <li>Available template placeholders:</li> <li><code>{{challenge}}</code> - The challenge text to be signed</li> <li><code>{{address}}</code> - The user's Evrmore address</li> <li><code>{{created_at}}</code> - The user's account creation date</li> <li><code>{{last_login}}</code> - The user's last login date</li> </ol>"},{"location":"guides/customization/#customizing-the-backend","title":"Customizing the Backend","text":""},{"location":"guides/customization/#environment-variables","title":"Environment Variables","text":"<p>Customize the behavior of the Evrmore Accounts backend by setting these environment variables:</p> Variable Description Default <code>JWT_SECRET</code> Secret key for JWT token signing Random string <code>JWT_EXPIRATION</code> JWT token expiration time in seconds 3600 (1 hour) <code>REFRESH_TOKEN_EXPIRATION</code> Refresh token expiration in seconds 2592000 (30 days) <code>CHALLENGE_EXPIRATION</code> Challenge expiration time in seconds 300 (5 minutes) <code>DATABASE_PATH</code> Path to SQLite database file <code>evrmore_accounts/data/users.db</code> <code>CORS_ORIGINS</code> Comma-separated list of allowed origins <code>*</code> <p>Example:</p> <pre><code>export JWT_SECRET=\"your-secure-secret-key\"\nexport JWT_EXPIRATION=7200\nexport CORS_ORIGINS=\"https://yourdomain.com,https://app.yourdomain.com\"\npython3 -m evrmore_accounts.app\n</code></pre>"},{"location":"guides/customization/#custom-database","title":"Custom Database","text":"<p>By default, Evrmore Accounts uses SQLite for storing user data. You can extend the package to use a different database:</p> <ol> <li>Create a custom database adapter:</li> </ol> <pre><code># custom_db_adapter.py\nfrom evrmore_accounts.db import DatabaseAdapter\nimport pymysql\n\nclass MySQLAdapter(DatabaseAdapter):\n    def __init__(self, host, user, password, database):\n        self.connection = pymysql.connect(\n            host=host,\n            user=user,\n            password=password,\n            database=database\n        )\n\n    def get_user(self, address):\n        cursor = self.connection.cursor()\n        cursor.execute(\"SELECT * FROM users WHERE address = %s\", (address,))\n        user = cursor.fetchone()\n        cursor.close()\n        if not user:\n            return None\n        return {\n            \"address\": user[0],\n            \"created_at\": user[1],\n            \"last_login\": user[2]\n        }\n\n    # Implement other required methods...\n</code></pre> <ol> <li>Use your custom adapter:</li> </ol> <pre><code># custom_app.py\nfrom evrmore_accounts.app import create_app\nfrom custom_db_adapter import MySQLAdapter\n\ndb_adapter = MySQLAdapter(\n    host=\"localhost\",\n    user=\"dbuser\",\n    password=\"dbpassword\",\n    database=\"evrmore_accounts\"\n)\n\napp = create_app(db_adapter=db_adapter)\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000)\n</code></pre>"},{"location":"guides/customization/#custom-authentication-logic","title":"Custom Authentication Logic","text":"<p>You can extend the authentication process with custom logic:</p> <ol> <li>Create a custom authentication handler:</li> </ol> <pre><code># custom_auth.py\nfrom evrmore_accounts.auth import AuthHandler\n\nclass CustomAuthHandler(AuthHandler):\n    def __init__(self, db_adapter):\n        super().__init__(db_adapter)\n\n    def authenticate(self, address, signature, challenge):\n        # First perform standard authentication\n        result = super().authenticate(address, signature, challenge)\n\n        if result.get(\"success\"):\n            # Add custom logic after successful authentication\n            # For example, check if user is in an allowlist\n            if not self._is_in_allowlist(address):\n                return {\"success\": False, \"error\": \"Address not in allowlist\"}\n\n        return result\n\n    def _is_in_allowlist(self, address):\n        # Custom logic to check if address is allowed\n        allowed_addresses = [\"EViF16aYCetDH56MyKCcxfyeZ3F7Ao7ZBc\", \"EQzZZEjNNUcmBfYCgaQSSoV2K3jxJcHYQ3\"]\n        return address in allowed_addresses\n</code></pre> <ol> <li>Use your custom handler:</li> </ol> <pre><code># custom_app.py\nfrom evrmore_accounts.app import create_app\nfrom evrmore_accounts.db import SQLiteAdapter\nfrom custom_auth import CustomAuthHandler\n\ndb_adapter = SQLiteAdapter(\"evrmore_accounts/data/users.db\")\nauth_handler = CustomAuthHandler(db_adapter)\n\napp = create_app(db_adapter=db_adapter, auth_handler=auth_handler)\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000)\n</code></pre>"},{"location":"guides/customization/#extending-the-api","title":"Extending the API","text":"<p>You can extend the API with custom endpoints:</p> <pre><code># custom_app.py\nfrom evrmore_accounts.app import create_app\nfrom flask import jsonify, request\n\napp = create_app()\n\n# Add custom endpoints\n@app.route(\"/api/custom/user-stats\", methods=[\"GET\"])\ndef user_stats():\n    # Get the authenticated user from the request\n    user = request.user  # Set by the JWT middleware\n\n    if not user:\n        return jsonify({\"error\": \"Not authenticated\"}), 401\n\n    # Custom logic to get user stats\n    stats = {\n        \"address\": user[\"address\"],\n        \"login_count\": 42,  # Example data\n        \"last_activity\": \"2025-03-12T10:30:00Z\"\n    }\n\n    return jsonify(stats)\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000)\n</code></pre>"},{"location":"guides/customization/#javascript-client-customization","title":"JavaScript Client Customization","text":""},{"location":"guides/customization/#custom-event-handlers","title":"Custom Event Handlers","text":"<p>You can add custom event handlers to the JavaScript client:</p> <pre><code>const evrmoreAccounts = new EvrmoreAccounts({\n  apiUrl: 'http://localhost:5000/api'\n});\n\n// Standard events\nevrmoreAccounts.on('authenticated', (user) =&gt; {\n  console.log('User authenticated:', user);\n  // Custom logic after authentication\n  trackUserLogin(user.address);\n});\n\nevrmoreAccounts.on('error', (error) =&gt; {\n  console.error('Authentication error:', error);\n  // Custom error handling\n  showCustomErrorNotification(error.message);\n});\n\n// Custom helper functions\nfunction trackUserLogin(address) {\n  // Analytics tracking\n  analytics.track('user_login', { address });\n}\n\nfunction showCustomErrorNotification(message) {\n  // Custom UI notification\n  const notification = document.createElement('div');\n  notification.className = 'error-notification';\n  notification.textContent = message;\n  document.body.appendChild(notification);\n\n  setTimeout(() =&gt; {\n    notification.remove();\n  }, 5000);\n}\n</code></pre>"},{"location":"guides/customization/#extending-the-javascript-client","title":"Extending the JavaScript Client","text":"<p>You can extend the JavaScript client with custom functionality:</p> <pre><code>// Extend the EvrmoreAccounts class\nclass CustomEvrmoreAccounts extends EvrmoreAccounts {\n  constructor(options) {\n    super(options);\n    this.customOptions = options.customOptions || {};\n  }\n\n  // Add custom methods\n  async getUserStats() {\n    if (!this.isAuthenticated()) {\n      throw new Error('User not authenticated');\n    }\n\n    const response = await fetch(`${this.apiUrl}/custom/user-stats`, {\n      headers: {\n        'Authorization': `Bearer ${this.getToken()}`\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch user stats');\n    }\n\n    return await response.json();\n  }\n}\n\n// Use the extended class\nconst evrmoreAccounts = new CustomEvrmoreAccounts({\n  apiUrl: 'http://localhost:5000/api',\n  customOptions: {\n    theme: 'dark',\n    analyticsEnabled: true\n  }\n});\n\n// Use custom methods\nasync function displayUserStats() {\n  try {\n    const stats = await evrmoreAccounts.getUserStats();\n    console.log('User stats:', stats);\n    // Update UI with stats\n  } catch (error) {\n    console.error('Error fetching user stats:', error);\n  }\n}\n</code></pre>"},{"location":"guides/customization/#complete-example","title":"Complete Example","text":"<p>Here's a complete example combining several customization techniques:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Custom Evrmore Accounts Integration&lt;/title&gt;\n\n  &lt;!-- Base styles --&gt;\n  &lt;link rel=\"stylesheet\" href=\"/evrmore_accounts/static/evrmore-accounts.css\"&gt;\n\n  &lt;!-- Custom styles --&gt;\n  &lt;link rel=\"stylesheet\" href=\"/path/to/custom-evrmore-accounts.css\"&gt;\n\n  &lt;style&gt;\n    /* Additional page styling */\n    body {\n      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n      line-height: 1.6;\n      color: #333;\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 20px;\n    }\n\n    .app-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 40px;\n      border-bottom: 1px solid #eee;\n      padding-bottom: 20px;\n    }\n\n    .app-content {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div class=\"app-header\"&gt;\n    &lt;h1&gt;My Custom Application&lt;/h1&gt;\n    &lt;div id=\"auth-container\"&gt;&lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;div class=\"app-content\"&gt;\n    &lt;div id=\"protected-content\" style=\"display: none;\"&gt;\n      &lt;h2&gt;Protected Content&lt;/h2&gt;\n      &lt;p&gt;This content is only visible to authenticated users.&lt;/p&gt;\n      &lt;button id=\"load-stats\"&gt;Load User Stats&lt;/button&gt;\n      &lt;div id=\"user-stats\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div id=\"public-content\"&gt;\n      &lt;h2&gt;Public Content&lt;/h2&gt;\n      &lt;p&gt;This content is visible to everyone.&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;!-- Evrmore Accounts JavaScript --&gt;\n  &lt;script src=\"/evrmore_accounts/static/evrmore-accounts.js\"&gt;&lt;/script&gt;\n\n  &lt;!-- Custom integration script --&gt;\n  &lt;script&gt;\n    // Extend the EvrmoreAccounts class\n    class CustomEvrmoreAccounts extends EvrmoreAccounts {\n      constructor(options) {\n        super(options);\n      }\n\n      async getUserStats() {\n        if (!this.isAuthenticated()) {\n          throw new Error('User not authenticated');\n        }\n\n        const response = await fetch(`${this.apiUrl}/custom/user-stats`, {\n          headers: {\n            'Authorization': `Bearer ${this.getToken()}`\n          }\n        });\n\n        if (!response.ok) {\n          throw new Error('Failed to fetch user stats');\n        }\n\n        return await response.json();\n      }\n    }\n\n    // Custom templates\n    const customTemplates = {\n      loginButton: `\n        &lt;button class=\"custom-login-button\" id=\"evrmore-login-button\"&gt;\n          &lt;svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n            &lt;path d=\"M19 7h-3V5a3 3 0 0 0-3-3h-2a3 3 0 0 0-3 3v2H5a3 3 0 0 0-3 3v8a3 3 0 0 0 3 3h14a3 3 0 0 0 3-3v-8a3 3 0 0 0-3-3zm-9-2a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2h-4V5zm10 13a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1v-8a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v8z\" fill=\"currentColor\"/&gt;\n            &lt;path d=\"M12 14a1 1 0 0 0-1 1v2a1 1 0 0 0 2 0v-2a1 1 0 0 0-1-1z\" fill=\"currentColor\"/&gt;\n          &lt;/svg&gt;\n          Sign in with Blockchain\n        &lt;/button&gt;\n      `,\n      userProfile: `\n        &lt;div class=\"custom-profile-container\"&gt;\n          &lt;div class=\"user-info\"&gt;\n            &lt;span class=\"user-address\"&gt;{{address}}&lt;/span&gt;\n            &lt;span class=\"user-since\"&gt;Member since: {{created_at}}&lt;/span&gt;\n          &lt;/div&gt;\n          &lt;button id=\"evrmore-logout-button\" class=\"logout-button\"&gt;Sign Out&lt;/button&gt;\n        &lt;/div&gt;\n      `\n    };\n\n    // Initialize the custom client\n    const evrmoreAccounts = new CustomEvrmoreAccounts({\n      apiUrl: 'http://localhost:5000/api',\n      containerId: 'auth-container',\n      templates: customTemplates,\n      logo: '/path/to/custom-logo.svg',\n      logoAlt: 'My Company'\n    });\n\n    // Event handlers\n    evrmoreAccounts.on('authenticated', (user) =&gt; {\n      console.log('User authenticated:', user);\n      document.getElementById('protected-content').style.display = 'block';\n      document.getElementById('public-content').style.display = 'none';\n\n      // Analytics tracking (example)\n      if (window.analytics) {\n        window.analytics.identify(user.address);\n        window.analytics.track('User Login');\n      }\n    });\n\n    evrmoreAccounts.on('logout', () =&gt; {\n      console.log('User logged out');\n      document.getElementById('protected-content').style.display = 'none';\n      document.getElementById('public-content').style.display = 'block';\n      document.getElementById('user-stats').innerHTML = '';\n\n      // Analytics tracking (example)\n      if (window.analytics) {\n        window.analytics.track('User Logout');\n      }\n    });\n\n    evrmoreAccounts.on('error', (error) =&gt; {\n      console.error('Authentication error:', error);\n      // Show custom error notification\n      alert(`Authentication error: ${error.message}`);\n    });\n\n    // Check authentication status on page load\n    document.addEventListener('DOMContentLoaded', () =&gt; {\n      if (evrmoreAccounts.isAuthenticated()) {\n        document.getElementById('protected-content').style.display = 'block';\n        document.getElementById('public-content').style.display = 'none';\n      } else {\n        document.getElementById('protected-content').style.display = 'none';\n        document.getElementById('public-content').style.display = 'block';\n      }\n\n      // Load user stats button\n      document.getElementById('load-stats').addEventListener('click', async () =&gt; {\n        try {\n          const stats = await evrmoreAccounts.getUserStats();\n          const statsContainer = document.getElementById('user-stats');\n          statsContainer.innerHTML = `\n            &lt;h3&gt;User Stats&lt;/h3&gt;\n            &lt;p&gt;Address: ${stats.address}&lt;/p&gt;\n            &lt;p&gt;Login count: ${stats.login_count}&lt;/p&gt;\n            &lt;p&gt;Last activity: ${new Date(stats.last_activity).toLocaleString()}&lt;/p&gt;\n          `;\n        } catch (error) {\n          console.error('Error loading user stats:', error);\n          document.getElementById('user-stats').innerHTML = `\n            &lt;p class=\"error\"&gt;Error loading stats: ${error.message}&lt;/p&gt;\n          `;\n        }\n      });\n    });\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"guides/customization/#next-steps","title":"Next Steps","text":"<p>After customizing Evrmore Accounts for your application:</p> <ol> <li>Test thoroughly to ensure all customizations work as expected</li> <li>Consider contributing useful customizations back to the main project</li> <li>Check the Security Guide for best practices</li> <li>Review the API Reference for additional customization options </li> </ol>"},{"location":"guides/troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide provides solutions for common issues you might encounter when using Evrmore Accounts.</p>"},{"location":"guides/troubleshooting/#api-server-issues","title":"API Server Issues","text":""},{"location":"guides/troubleshooting/#server-wont-start","title":"Server Won't Start","text":"<p>Symptoms: - Error messages when starting the server - Server crashes immediately after starting</p> <p>Possible Causes and Solutions:</p> <ol> <li>Port Already in Use <pre><code>Error: Address already in use\n</code></pre></li> </ol> <p>Solution: Another application is using port 5000. Either:    - Stop the other application    - Change the port by setting the <code>PORT</code> environment variable:      <pre><code>export PORT=5001\npython3 -m evrmore_accounts.app\n</code></pre></p> <ol> <li>Missing Dependencies <pre><code>ModuleNotFoundError: No module named 'flask'\n</code></pre></li> </ol> <p>Solution: Install all required dependencies:    <pre><code>pip3 install -r requirements.txt\n</code></pre></p> <ol> <li>Invalid Configuration <pre><code>KeyError: 'JWT_SECRET'\n</code></pre></li> </ol> <p>Solution: Ensure all required environment variables are set:    <pre><code>export JWT_SECRET=your_secure_secret\nexport JWT_EXPIRATION=3600\n</code></pre></p>"},{"location":"guides/troubleshooting/#database-issues","title":"Database Issues","text":"<p>Symptoms: - Error messages related to SQLite - Authentication failures despite correct signatures</p> <p>Possible Causes and Solutions:</p> <ol> <li>Database Permission Issues <pre><code>sqlite3.OperationalError: unable to open database file\n</code></pre></li> </ol> <p>Solution: Ensure the application has write permissions to the data directory:    <pre><code>chmod 755 evrmore_accounts/data\n</code></pre></p> <ol> <li>Corrupted Database</li> </ol> <p>Solution: Backup and recreate the database:    <pre><code>mv evrmore_accounts/data/users.db evrmore_accounts/data/users.db.bak\n# Restart the application to create a new database\n</code></pre></p>"},{"location":"guides/troubleshooting/#authentication-issues","title":"Authentication Issues","text":""},{"location":"guides/troubleshooting/#challenge-generation-fails","title":"Challenge Generation Fails","text":"<p>Symptoms: - Error when requesting a challenge - Empty or invalid challenge response</p> <p>Possible Causes and Solutions:</p> <ol> <li>Invalid Evrmore Address <pre><code>{\"error\": \"Invalid Evrmore address format\"}\n</code></pre></li> </ol> <p>Solution: Ensure you're using a valid Evrmore address format (starting with 'E').</p> <ol> <li>Server Configuration Issues</li> </ol> <p>Solution: Check server logs for specific errors and ensure all environment variables are correctly set.</p>"},{"location":"guides/troubleshooting/#authentication-fails","title":"Authentication Fails","text":"<p>Symptoms: - Authentication fails despite providing a valid signature - Error messages during authentication</p> <p>Possible Causes and Solutions:</p> <ol> <li>Expired Challenge <pre><code>{\"error\": \"Challenge expired\"}\n</code></pre></li> </ol> <p>Solution: Challenges expire after 5 minutes. Request a new challenge and complete authentication promptly.</p> <ol> <li>Invalid Signature <pre><code>{\"error\": \"Invalid signature\"}\n</code></pre></li> </ol> <p>Solution:     - Ensure you're signing the exact challenge string provided    - Verify you're using the correct private key for the address    - Check that the signature format is correct</p> <ol> <li>Clock Synchronization</li> </ol> <p>Solution: Ensure your server's clock is synchronized correctly:    <pre><code>sudo ntpdate pool.ntp.org\n</code></pre></p>"},{"location":"guides/troubleshooting/#javascript-client-issues","title":"JavaScript Client Issues","text":""},{"location":"guides/troubleshooting/#library-not-loading","title":"Library Not Loading","text":"<p>Symptoms: - Console errors about missing library - <code>EvrmoreAccounts is not defined</code> errors</p> <p>Possible Causes and Solutions:</p> <ol> <li>Incorrect Path</li> </ol> <p>Solution: Verify the path to the JavaScript file:    <pre><code>&lt;script src=\"/evrmore_accounts/static/evrmore-accounts.js\"&gt;&lt;/script&gt;\n</code></pre></p> <ol> <li>CORS Issues</li> </ol> <p>Solution: Check browser console for CORS errors and ensure your server is configured to allow requests from your domain.</p>"},{"location":"guides/troubleshooting/#authentication-flow-issues","title":"Authentication Flow Issues","text":"<p>Symptoms: - Authentication process starts but doesn't complete - No callback functions triggered</p> <p>Possible Causes and Solutions:</p> <ol> <li>Incorrect API URL</li> </ol> <p>Solution: Ensure you're providing the correct API URL when initializing:    <pre><code>const evrmoreAccounts = new EvrmoreAccounts({\n  apiUrl: 'http://your-server:5000/api'\n});\n</code></pre></p> <ol> <li>Missing Event Handlers</li> </ol> <p>Solution: Verify you've set up all required event handlers:    <pre><code>evrmoreAccounts.on('authenticated', (user) =&gt; {\n  console.log('User authenticated:', user);\n});\n\nevrmoreAccounts.on('error', (error) =&gt; {\n  console.error('Authentication error:', error);\n});\n</code></pre></p>"},{"location":"guides/troubleshooting/#docker-deployment-issues","title":"Docker Deployment Issues","text":""},{"location":"guides/troubleshooting/#container-wont-start","title":"Container Won't Start","text":"<p>Symptoms: - Container exits immediately after starting - Error messages in Docker logs</p> <p>Possible Causes and Solutions:</p> <ol> <li>Missing Environment Variables</li> </ol> <p>Solution: Ensure all required environment variables are provided:    <pre><code>docker run -p 5000:5000 \\\n  -e JWT_SECRET=your_secure_secret \\\n  -e JWT_EXPIRATION=3600 \\\n  evrmore-accounts\n</code></pre></p> <ol> <li>Port Conflicts</li> </ol> <p>Solution: If port 5000 is already in use, map to a different port:    <pre><code>docker run -p 8080:5000 evrmore-accounts\n</code></pre></p>"},{"location":"guides/troubleshooting/#container-starts-but-api-unreachable","title":"Container Starts But API Unreachable","text":"<p>Symptoms: - Container appears to be running - Cannot connect to API endpoints</p> <p>Possible Causes and Solutions:</p> <ol> <li>Incorrect Host Configuration</li> </ol> <p>Solution: Ensure the application is binding to 0.0.0.0 instead of localhost:    <pre><code>docker run -p 5000:5000 -e HOST=0.0.0.0 evrmore-accounts\n</code></pre></p>"},{"location":"guides/troubleshooting/#still-having-issues","title":"Still Having Issues?","text":"<p>If you're still experiencing problems after trying these solutions:</p> <ol> <li> <p>Check the application logs for detailed error messages:    <pre><code>python3 -m evrmore_accounts.app --debug\n</code></pre></p> </li> <li> <p>Open an issue on our GitHub repository with:</p> </li> <li>Detailed description of the issue</li> <li>Steps to reproduce</li> <li>Error messages and logs</li> <li> <p>Your environment details (OS, Python version, etc.)</p> </li> <li> <p>Contact our support team at dev@manticore.technology </p> </li> </ol>"}]}